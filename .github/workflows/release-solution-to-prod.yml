name: release-solution-to-prod-reusable
# Reusable workflow
# convert solution to managed (using a build PowerPlatform environment for the conversion)
# upload the solution to the GitHub artifacts and deploy to the PROD environment
on:
  workflow_call:
    inputs: 
      #Do Not change these values
      #Values are set by the caller
      #caller sample: release-action-call.ymnl
      solution_name:
        description: 'The solution name.'
        type: string
        default: ALMLab       
      solution_shipping_folder:
        description: 'folder name for staging the exported solution *do not change*'        
        type: string
        default: out/ship/
      solution_outbound_folder:
        description: 'staging the unpacked solution folder before check-in *do not change*'
        type: string
        default: out/solutions/
      solution_source_folder: 
       description: 'folder name to be created and checked in *do not change*'
       type: string
       default: solutions/
      solution_release_folder:
       description: 'folder where the released binaries are going to be hosted *do not change*'
       type: string
       default: solutions/Test
       #default: out/release
      BUILD_ENVIRONMENT_URL:
        description: 'Build environment url.'
        type: string
        required: true      
      PRODUCTION_ENVIRONMENT_URL: 
        description: 'Production environment url.'
        type: string
        required: true
      CLIENT_ID: 
        description: 'The client id'
        type: string
        required: true
      TENANT_ID: 
        description: 'The tenant id'
        type: string
        required: true
    secrets:
      envSecret:
        description: 'The secret value for authentication using SPN'
        required: true

jobs:
  convert-to-managed:
    runs-on: windows-latest
    # or you can say runs-on: ubuntu-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true

    - name: Pack solution
      uses: microsoft/powerplatform-actions/pack-solution@v0
      with:
        solution-folder: ${{ inputs.solution_source_folder}}/${{ inputs.solution_name }}
        solution-file: ${{ inputs.solution_outbound_folder}}/${{ inputs.solution_name }}.zip
        solution-type: Unmanaged

    - name: Import solution as unmanaged to build env
      uses: microsoft/powerplatform-actions/import-solution@v0
      with:
        environment-url: ${{inputs.BUILD_ENVIRONMENT_URL}}
        app-id: ${{inputs.CLIENT_ID}}
        client-secret: ${{ secrets.envSecret }}
        tenant-id: ${{inputs.TENANT_ID}}
        solution-file: ${{ inputs.solution_outbound_folder}}/${{ inputs.solution_name }}.zip
        force-overwrite: true
        publish-changes: true

    - name: Export solution as managed
      uses: microsoft/powerplatform-actions/export-solution@v0
      with:
        environment-url: ${{inputs.BUILD_ENVIRONMENT_URL}}
        app-id: ${{inputs.CLIENT_ID}}
        client-secret: ${{ secrets.envSecret }} 
        tenant-id: ${{inputs.TENANT_ID}}
        solution-name: ${{ inputs.solution_name }}
        managed: true
        solution-output-file: ${{ inputs.solution_shipping_folder}}/${{ inputs.solution_name }}_managed.zip

    - name: Upload the ready to ship solution to GH artifact store
      uses: actions/upload-artifact@v4
      with:
        name: managedSolutions
        #path: ${{ inputs.solution_release_folder }}/
        path: ${{ inputs.solution_shipping_folder}}/

    # - name: Checkout repository
    #   uses: actions/checkout@v4
    #   with:
    #     fetch-depth: 0             # fetch full history so you can push
    #     ref: main                  # or the branch you want to commit to
    #     token: ${{ secrets.GITHUB_TOKEN }}
        
    # - name: Move exported files into repo folder
    #   run: |
    #     mkdir -p solutions/Test
    #     cp out/*.zip solutions/Test/ || move out\*.zip solutions\Test\   # Linux or Windows
    #     cp out/*.json solutions/Test/ || move out\*.json solutions\Test\

    # - name: Commit managed solution
    #   run: |
    #     git config user.name "github-actions"
    #     git config user.email "github-actions@github.com"
    #     git checkout main
    #     git pull --rebase origin main
    
    #     git add solutions/Test/
    #     git diff --cached --quiet || git commit -m "Export managed solution from Dev"
    #     git push origin main
      
    # 6. Commit and push files back to repository
    # - name: Commit managed solution
    #   run: |
    #     git config user.name "github-actions"
    #     git config user.email "github-actions@github.com"
    #     git checkout main
    
    #     # Stage files
    #     git add solutions/Test/
    
    #     # Only commit if there are changes
    #     git diff --cached --quiet || git commit -m "Export managed solution from Dev"
    
    #     # Sync with remote before push
    #     git pull --rebase origin main
    #     git push origin main


  release-to-staging:
    needs: [ convert-to-managed ]
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
        
    - name: Install Power Platform Tools
      uses: microsoft/powerplatform-actions/actions-install@v1
      
    - name: Fetch the ready to ship solution from GH artifact store
      uses: actions/download-artifact@v4
      with:
        name: managedSolutions
        path: ${{ inputs.solution_release_folder}}
        
    - name: Import solution to prod env
      uses: microsoft/powerplatform-actions/import-solution@v1
      with:
        environment-url: ${{inputs.PRODUCTION_ENVIRONMENT_URL}}
        app-id: ${{inputs.CLIENT_ID}}
        client-secret: ${{ secrets.envSecret }}
        tenant-id: ${{inputs.TENANT_ID}}
        solution-file: ${{ inputs.solution_release_folder}}/${{ inputs.solution_name }}_managed.zip
        use-deployment-settings-file: true
        deployment-settings-file: ${{ inputs.solution_release_folder}}/DeploymentSettings.json
        force-overwrite: true
        publish-changes: true
